devtools::document()
sum(is.na(iris))
sapply(iris, typeof)
sapply(iris, class)
sum(sapply(iris, class) %in% c("double", "numeric"))
sapply(iris, is.na)
sapply(iris, is.na) %>% sapply(sum)
sapply(sapply(iris, is.na),sum)
a <- sapply(iris, is.na)
sapply(as.data.frame(sapply(iris, is.na)),sum)
sum(sapply(as.data.frame(sapply(iris, is.na)),sum))
#'@param ln_vars ---
#'@param ln_vars_tr ---
#'@param trC_method ---
#'@param trC_num ---
#'@param trC_rep ---
#'@import tidyverse
#'@import rsample
#'@import caret
#'@return A plot object
#'@export
crear_modelo <- function(data, var_est, var_exp, intercep=NULL, method, percTest,
ln_vars=F, ln_vars_tr = NULL, trC_method = "none",
trC_num, trC_rep){
data <- data[c(var_est, var_exp)]
if(ln_vars){data <- data %>% mutate_at(ln_vars_tr, log)}
if(trC_num == 0){trC_num<- NA}
if(trC_num == 0){trC_num<- NA}
aux <- as.numeric(which(names(data)==var_est))
data <- data %>% mutate(y = data[[var_est]])
data <- data[-aux]
train_test <- initial_split(data = data, (percTest/100))
train <- training(train_test)
test <- testing(train_test)
if(intercep){
model <- train(
y ~ .,
train,
method = method,
trControl = trainControl(
method = trC_method,
number = trC_num,
repeats = trC_rep,
verboseIter = F
)
)
}else{
model <- train(
y ~ -1 + .,
train,
method = method,
trControl = trainControl(
method = trC_method,
number = trC_num,
repeats = trC_rep,
verboseIter = F
)
)
}
return(model)
}
crear_modelo(iris, var_est = "Species", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8)
crear_modelo(iris, var_est = "Species", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8, trC_num = 0)
crear_modelo(iris, var_est = "Species", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8, trC_num = 5)
library(tidyverse)
library(sample)
library(rsample)
library(caret)
crear_modelo(iris, var_est = "Species", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8, trC_num = 5)
crear_modelo(iris, var_est = "Species", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8, trC_num = 5, trC_rep = 5)
install.packages("e1071")
crear_modelo(iris, var_est = "Species", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8, trC_num = 5, trC_rep = 5)
crear_modelo(iris, var_est = "Petal.Length", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8, trC_num = 5, trC_rep = 5)
mod <- crear_modelo(iris, var_est = "Petal.Length", intercep = T, method = "glm", var_exp = c("Sepal.Length"), percTest = 8, trC_num = 5, trC_rep = 5)
summary(mod)
class(iris[["Species"]])
class(iris[["Sepal.Length"]])
length(unique(iris[["Sepal.Length"]]))
length(unique(iris[["Species"]]))
sum(sapply(iris, class)=="numeric")
library(EDAS)
library(EDAS)
library(EDAS)
library(EDAS)
library(EDAS)
#'Summary of all data
#'
#'@param data A database to use
#'@param var_est Acharacter value with the column name to study, NULL by default
#'@import olsrr
#'@import dplyr
#'@return A cat summary
#'@export
Summ_all_data <- function(data, var_est=NULL){
dataset <- data
tipoNum <- sum(sapply(data, class) %in% c("double", "numeric"))
tipoDis <- sum(sapply(data, class) %in% c("double", "numeric"))
tipoNAs <- sum(sapply(as.data.frame(sapply(data, is.na)),sum))
ss1 <- paste("La base de datos consta de", ncol(data), "columnas de", nrow(data),
"observaciones cada una y con un total de" , sum(is.na(data)),
"valores perdidos.\n",
"De estas columnas,", tipoDis,
"son discretas,", tipoNum, "son continuas y", tipoNAs,
"estan completamente vacias.")
if(is.null(var_est)){
e <- f <- ""
if(tipoNum>2){
e <- "Dado que no has ingresado una variable de estudio, te sugerimos que realices un analisis PCA"
}
if(tipoDis>2){
f <- "Dado que no has ingresado una variable de estudio, te sugerimos que realices un analisis MCA"
}
return(cat(ss1, "\n\n", e, "\n\n", f))
}else{
cVar <- class(data[[var_est]]) == "numeric"
nFactor <- length(unique(data[[var_est]]))
e <- f <- ""
if(tipoNum>2){
e <- "Te sugerimos que realices un analisis PCA para intentar reducir dimensiones"
}
if(tipoDis>2){
f <- "Te sugerimos que realices un analisis MCA para intentar reducir dimensiones"
}
if(cVar){
g <- "Y posteriormente realizar un modelo lineal"
}else{
g <- nFactor
if(nFactor==2){
g <- "Y posteriormente reaalizar un modelo lineal generalizado"
}
if(nFactor>2){
g <- "Luego, realizar un analisis de cluster y finalmente,
si pueder agrupar en dos conjuntos, realizar un modelo lineal generalizado."
}
}
data_aux <- data[which(sapply(data, class)=="numeric")]
data_aux2 <- data_aux[-which(names(data_aux)==var_est)]
model <- lm(data_aux[[var_est]] ~ ., data = data_aux2)
ati <- ols_plot_resid_stud_fit(model, print_plot = FALSE)
out <- ati$plot$data[as.vector(ati$plot$data["color"] == "outlier"),]$obs
inf <- ols_plot_cooksd_bar(model, print_plot = FALSE)
ifp <- inf$plot$data[as.vector(inf$plot$data["color"] == "outlier"),]$obs
a <- paste("Cuidado, se identificaron las siguientes observaciones con datos atipicos **",
toString(out), "**\n Se recomienda verificar que esta no sea un error de captura y, de ser asi, eliminarla.")
b <- paste("Cuidado, se identificaron que las siguientes observaciones tienen una alta influencia **",
toString(ifp), "**\n Se recomienda verificar que esta no sea un error de captura y, de ser asi, eliminarla.")
c <- "No se encontraron observaciones con datos atipicos."
d <- "No se encontraron observaciones con una alta influencia"
cat(ss1, "\n\n",if_else(length(out)>0, a, c),"\n\n",
if_else(length(ifp)>0, b, d), "\n\n", e, "\n\n", f, "\n\n", g)
}
}
library(EDAS)
Summ_all_data(irir, "Species")
Summ_all_data(iris, "Species")
Summ_all_data(iris, "Species")
library(EDAS)
Summ_all_data(iris, "Species")
Summ_all_data(data = iris, var_est = "Species")
library(EDAS)
Summ_all_data(data = iris, var_est = "Species")
Summ_all_data(data = iris)
Summ_all_data(data = iris, var_est = "Sepal.Length")
Summ_all_data(data = iris, var_est = "Species")
length(unique(iris[["Species"]]))
library(EDAS)
Summ_all_data(data = iris, var_est = "Species")
lm(Species ~ ., data=iris)
library(EDAS)
Summ_all_data(data = iris, var_est = "Species")
library(EDAS)
Summ_all_data(data = iris, var_est = "Species")
library(EDAS)
library(EDAS)
sum(sapply(as.data.frame(sapply(iris, is.na)),sum))
data <- read.csv("C:/Users/Marco/OneDrive/Escritorio/Bases/Iris/irisNA.csv")
sum(sapply(as.data.frame(sapply(data, is.na)),sum))
sapply(data, is.na)
sapply(as.data.frame(sapply(data, is.na)),sum)
sum(sapply(as.data.frame(sapply(data, is.na)),sum)==ncol(data)*.8)
ncol(data)*.8
ncol(data)
nrow(data)*.8
library(EDAS)
Summ_all_data(data, "Species")
library(EDAS)
Summ_all_data(data, "Species")
library(EDAS)
