conditionalPanel("input.NN_2",
numericInput("lDrop2_NN", "Porcentaje del segundo drop", min = 0, max = 70, value = 20, step = 1),
numericInput("unitsE3_NN", "Numero de neuronas de la tercera capa", min = 1, max = 1000, value = NULL, step = 1),
selectInput("activationE3_NN", "Funcion de activacion de la tercera capa", choices = as.list(c("relu", "softmax", "sigmoid", "softplus", "softsing", "tanh", "selu", "elu", "exponential")), selected = NULL)
)
)
),
column(width = 3,
conditionalPanel("input.NN_1",
numericInput("lDrop3_NN", "Porcentaje del tercer drop", min = 0, max = 70, value = 20, step = 1),
),
#numericInput("unitsE4_NN", "Numero de neuronas de la capa Final", min = 1, max = 1000, value = 100, step = 1),
selectInput("activationE4_NN", "Funcion de activacion de la capa Final", choices = as.list(c("relu", "softmax", "sigmoid", "softplus", "softsing", "tanh", "selu", "elu", "exponential"))),
numericInput("epochsE_NN", "Epochs", min = 50, max = 1000, value = 100, step = 1),
numericInput("batch_sizeE_NN", "Batch Size", min = 1, max = 100, value = 32, step = 1),
numericInput("validation_splitE_NN", "Porcentaje de datos de validacion para la red", min = 0, max = 30, value = 0, step = 1),
actionBttn("NNButton","Crear red", style = "jelly", size = "sm")
)
)
)
)
)
})
output$NN2 = renderUI({
div(
style = "position : static",
tabBox(
id = "Neural network 2",
width = NULL,
height = 500,
tabPanel(
title = "Resultados Neural Network",
div(style = "position : static",
column(width = 4,
dataTableOutput("NN_Data"),
),
column(width = 4,
plotOutput("NN_Plot")
),
column(width = 4,
verbatimTextOutput("NN_Summ")
)
)
)
)
)
})
##### CD SERVER #####-----------------------------------------------------------------------------------------------------
#Inicializamos la base
data1 <- reactiveValues(base = NULL)
dataCar <- reactiveValues(value = FALSE)
#Cargamos la base
#Primer boton
observeEvent(input$CargarButton,{
output$ViewBDD = renderDataTable ({
isolate({
data1 <<- NULL
fileb <- input$datos
if(is.null(fileb)){return()}
data1 <<- read.csv(file= fileb$datapath, header = input$header, stringsAsFactors = input$stringAsFactors)
data1 <<- data1[,-1]
data1 <<- cambio_prop(dataset = data1, columns = which(sapply(data1, class)== "logical"), prop = "factor")
data1 <<- cambio_prop(dataset = data1, columns = which(sapply(data1, class)== "integer"), prop = "double")
datatable(data1, options = list(scrollX = T, pageLength = 10))
})
})
output$SummaryCD <- renderPrint({
updateCheckboxGroupInput(session, "cambio_prop_cols", choices = as.list(names(data1))[1:round(length(names(data1))/3)])
updateCheckboxGroupInput(session, "cambio_prop_cols2", choices = as.list(names(data1))[(round(length(names(data1))/3)+1):(round(length(names(data1))/3)*2)])
updateCheckboxGroupInput(session, "cambio_prop_cols3", choices = as.list(names(data1))[(round(length(names(data1))/3)*2+1):length(names(data1))])
updateCheckboxGroupInput(session, "elim_col1", choices = as.list(names(data1))[1:round(length(names(data1))/3)])
updateCheckboxGroupInput(session, "elim_col2", choices = as.list(names(data1))[(round(length(names(data1))/3)+1):(round(length(names(data1))/3)*2)])
updateCheckboxGroupInput(session, "elim_col3", choices = as.list(names(data1))[(round(length(names(data1))/3)*2+1):length(names(data1))])
updateSelectInput(session, "var_est", choices = as.list(c("NULL", names(data1))), selected = "NULL")
updateSelectInput(session, "var1", choices = as.list(names(data1)))
updateSelectInput(session, "vars1", choices = as.list(names(data1)))
updateSelectInput(session, "vars2", choices = as.list(names(data1)))
updateSelectInput(session, "ColorSum", choices = as.list(c("NULL",names(data1))))
updateSelectInput(session, "SizeSum", choices = as.list(c("NULL",names(data1))))
updateSelectInput(session, "var1_anim", choices = as.list(names(data1)))
updateSelectInput(session, "var2_anim", choices = as.list(names(data1)))
updateSelectInput(session, "group_anim", choices = as.list(names(which(sapply(data1,class)== "factor"))))
updateSelectInput(session, "BiplotHab", choices = as.list(names(dplyr::select_if(data1, is.factor))))
updateSelectInput(session, "BiplotHab2", choices = as.list(names(dplyr::select_if(data1, is.factor))))
updateSelectInput(session, "var_est_NN", choices = as.list(names(dplyr::select_if(data1, is.factor))))
isolate(Summ_all_data(data1))
})
dataCar$value <<- TRUE
})
#Este es el segundo boton
observeEvent(input$CleanButton,{
if(is.null(input$datos)){return()}
output$ViewBDD = renderDataTable ({
isolate({
if(input$all_miss_col){data1 <<- all_miss_col(data1, input$perc_drop)}
if(input$cambio_prop){data1 <<- cambio_prop(data1, c(input$cambio_prop_cols, input$cambio_prop_cols2,input$cambio_prop_cols3), input$cambio_prop_choise)}
if(input$imp_data){data1 <<- imp_data(as.data.frame(data1), input$imp_data_choise)}
datatable(data1, options = list(scrollX = T, pageLength = 10))})
})
output$SummaryCD <- renderPrint({
updateCheckboxGroupInput(session, "cambio_prop_cols", choices = as.list(names(data1))[1:round(length(names(data1))/3)])
updateCheckboxGroupInput(session, "cambio_prop_cols2", choices = as.list(names(data1))[(round(length(names(data1))/3)+1):(round(length(names(data1))/3)*2)])
updateCheckboxGroupInput(session, "cambio_prop_cols3", choices = as.list(names(data1))[(round(length(names(data1))/3)*2+1):length(names(data1))])
updateCheckboxGroupInput(session, "elim_col1", choices = as.list(names(data1))[1:round(length(names(data1))/3)])
updateCheckboxGroupInput(session, "elim_col2", choices = as.list(names(data1))[(round(length(names(data1))/3)+1):(round(length(names(data1))/3)*2)])
updateCheckboxGroupInput(session, "elim_col3", choices = as.list(names(data1))[(round(length(names(data1))/3)*2+1):length(names(data1))])
updateSelectInput(session, "var_est", choices = as.list(c("NULL", names(data1))), selected = "NULL")
updateSelectInput(session, "var1", choices = as.list(names(data1)))
updateSelectInput(session, "vars1", choices = as.list(names(data1)))
updateSelectInput(session, "vars2", choices = as.list(names(data1)))
updateSelectInput(session, "ColorSum", choices = as.list(c("NULL",names(data1))))
updateSelectInput(session, "SizeSum", choices = as.list(c("NULL",names(data1))))
updateSelectInput(session, "var1_anim", choices = as.list(names(data1)))
updateSelectInput(session, "var2_anim", choices = as.list(names(data1)))
updateSelectInput(session, "group_anim", choices = as.list(names(which(sapply(data1,class)== "factor"))))
updateSelectInput(session, "BiplotHab", choices = as.list(names(dplyr::select_if(data1, is.factor))))
updateSelectInput(session, "BiplotHab2", choices = as.list(names(dplyr::select_if(data1, is.factor))))
updateSelectInput(session, "var_est_NN", choices = as.list(names(dplyr::select_if(data1, is.factor))))
isolate(Summ_all_data(data1))
})
})
#Tercer Boton
observeEvent(input$varEstButton,{
output$SummaryCD <- renderPrint({
isolate({if(is.null(input$datos)){return()}
if(input$var_est %in% c("NULL", "") | class(data1[[input$var_est]]) != "numeric"){
Summ_all_data(data1)
}else{
Summ_all_data(data1, input$var_est)
}
})
})
})
#Cuarto boton
observeEvent(input$Clean2Button,{
output$ViewBDD = renderDataTable ({
isolate({
if(is.null(input$datos)){;return()}
elim_col <- function(data, vars_elim){
dataaux <- data
for (i in vars_elim) {
dataaux <- dataaux[-which(names(dataaux)==i)]
}
return(dataaux)
}
if(input$elim_col){data1 <<- elim_col(data1, c(input$elim_col1, input$elim_col2, input$elim_col3))}
if(input$elim_row){data1 <<- data1[-input$elim_row1,]}
updateCheckboxGroupInput(session, "cambio_prop_cols", choices = as.list(names(data1))[1:round(length(names(data1))/3)])
updateCheckboxGroupInput(session, "cambio_prop_cols2", choices = as.list(names(data1))[(round(length(names(data1))/3)+1):(round(length(names(data1))/3)*2)])
updateCheckboxGroupInput(session, "cambio_prop_cols3", choices = as.list(names(data1))[(round(length(names(data1))/3)*2+1):length(names(data1))])
updateCheckboxGroupInput(session, "elim_col1", choices = as.list(names(data1))[1:round(length(names(data1))/3)])
updateCheckboxGroupInput(session, "elim_col2", choices = as.list(names(data1))[(round(length(names(data1))/3)+1):(round(length(names(data1))/3)*2)])
updateCheckboxGroupInput(session, "elim_col3", choices = as.list(names(data1))[(round(length(names(data1))/3)*2+1):length(names(data1))])
updateSelectInput(session, "var_est", choices = as.list(c("NULL", names(data1))), selected = "NULL")
updateSelectInput(session, "var1", choices = as.list(names(data1)))
updateSelectInput(session, "vars1", choices = as.list(names(data1)))
updateSelectInput(session, "vars2", choices = as.list(names(data1)))
updateSelectInput(session, "ColorSum", choices = as.list(c("NULL",names(data1))))
updateSelectInput(session, "SizeSum", choices = as.list(c("NULL",names(data1))))
updateSelectInput(session, "var1_anim", choices = as.list(names(data1)))
updateSelectInput(session, "var2_anim", choices = as.list(names(data1)))
updateSelectInput(session, "group_anim", choices = as.list(names(which(sapply(data1,class)== "factor"))))
updateSelectInput(session, "BiplotHab", choices = as.list(names(dplyr::select_if(data1, is.factor))))
updateSelectInput(session, "BiplotHab2", choices = as.list(names(dplyr::select_if(data1, is.factor))))
updateSelectInput(session, "var_est_NN", choices = as.list(names(dplyr::select_if(data1, is.factor))))
datatable(data1, options = list(scrollX = T, pageLength = 10))
})
})
output$SummaryCD <- renderPrint({
isolate({if(is.null(input$datos)){return()}
if(input$var_est %in% c("NULL", "") | class(data1[[input$var_est]]) != "numeric"){
Summ_all_data(data1)
}else{
Summ_all_data(data1, input$var_est)
}
})
})
})
##### EDA SERVER #####--------------------------------------------------
#actualizar opciones del primer panel del EDA
choices1var = reactive({
switch(class(data1[, input$var1]),
"numeric" = as.list(c("Boxplot", "Histogram", "Density")),
"factor" = as.list(c("Barchart", "Piechart"))
)
})
observe({
if(input$var1 != "" && !is.null(input$var1)){
updateSelectInput(session, "Graf1", choices = choices1var())
}
})
observe({
if(input$var1 != "" && !is.null(input$var1)){
if(class(data1[,input$var1]) == "factor"){
updateSelectInput(session, "CatLev", choices = levels(data1[,input$var1]))
}
else{updateSelectInput(session, "CatLev", choices = character(0))}
}
})
choices2var = reactive({
switch(paste(class(data1[, input$vars1]), class(data1[, input$vars2])),
"factor numeric" = as.list(c("Boxplot", "Lines", "Columns")),
"factor factor" = as.list(c("Barchart")),
"numeric factor" = as.list(c("Boxplot", "Lines")),
"numeric numeric" = as.list(c("Scatterplot"))
)
})
observe({
if(input$vars1 != "" && !is.null(input$vars1) && input$vars2 != "" && !is.null(input$vars2)){
updateSelectInput(session, "Graf1y2", choices = choices2var())
}
})
#graficar para una variable
observeEvent(input$unavarButton,{
geom1var = reactive({
switch(input$Graf1,
"Boxplot" = geom_boxplot(aes_string(x = 1, y = input$var1)),
"Histogram" = geom_histogram(aes_string(x = input$var1), fill = "lightblue", color= "black",
bins = floor(sqrt(nrow(data1)))),
"Density" = geom_density(aes_string(x = input$var1)),
"Barchart" = list(geom_bar(aes_string(x = input$var1, fill = input$var1)),
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))),
"Piechart" = list(geom_bar(aes_string(x = input$var1, fill = input$var1)),
coord_polar(theta = "x"),labs(fill = NULL))
)
})
output$Sumgrafic = renderPlot({
isolate(ggplot(data1) + geom1var())
})
output$SumText = renderPrint({ isolate( summary(data1[,input$var1]) ) })
output$EDAHelp = renderText({"Resumen de la variable:"})
## Para las relaciones
des = reactive(
switch(class(data1[, input$var1]),
"factor" = catdes(data1, num.var = which(colnames(data1) == input$var1)),
"numeric" = condes(data1, num.var = which(colnames(data1) == input$var1))
)
)
output$RelCat = renderDataTable({
switch(class(data1[, input$var1]),
"factor" = isolate(DT::datatable(as.data.frame(des()$category[input$CatLev][input$CatLev]),
options = list(scrollX = T, pageLength = 5),
colnames = c("Cat/Row", "Row/Cat", "Global", "p-value", "v-test"))),
"numeric" = isolate(DT::datatable(as.data.frame(des()$category),
options = list(scrollX = T, pageLength = 5)))
)
})
output$RelNum = renderDataTable({
switch(class(data1[, input$var1]),
"factor" = isolate(DT::datatable(as.data.frame(des()$quanti[input$CatLev][input$CatLev]),
options = list(scrollX = T, pageLength = 5),
colnames = c("v-test", "Cat. Mean", "Global Mean", "Cat. sd", "Global sd", "p-value"))),
"numeric" = isolate(DT::datatable(as.data.frame(des()$quanti),
options = list(scrollX = T, pageLength = 5)))
)
})
})
#graficar para 2 variables
observeEvent(input$mvarsButton,{
boxParax = c("integer factor", "integer logical", "numeric factor", "numeric logical")
boxParay = c("factor integer", "logical integer", "factor numeric", "logical numeric")
geom2Box = reactive({
switch(paste(class(data1[, input$vars1]), class(data1[, input$vars2])),
"numeric factor" = geom_boxplot(aes_string(x = input$vars2, y = input$vars1)),
"factor numeric" = geom_boxplot(aes_string(x = input$vars1, y = input$vars2))
)
})
geom2Line = reactive({
switch(paste(class(data1[, input$vars1]), class(data1[, input$vars2])),
"numeric factor" = geom_density(aes_string(x = input$vars1, color = input$vars2)),
"factor numeric" = geom_density(aes_string(x = input$vars2, color = input$vars1))
)
})
geom2Final = reactive({
switch(input$Graf1y2,
"Boxplot" = geom2Box(),
"Lines" = geom2Line(),
"Scatterplot" = geom_point(aes_string(x = input$vars1, y = input$vars2,
color = input$ColorSum, size = input$SizeSum)),
"Barchart" = list(geom_bar(aes_string(x = input$vars1, fill = input$vars2)),
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))),
"Columns" = geom_col(aes_string(x=input$vars1, y=input$vars2, fill = input$vars1))
)
})
output$Sumgrafic = renderPlot({
isolate( ggplot(data1) + geom2Final() )
})
output$SumText = renderPrint({
isolate(if(paste(class(data1[, input$vars1]), class(data1[, input$vars2])) == "numeric numeric"){
cor(data1[ ,input$vars1], data1[ ,input$vars2]) }
else{print("Para analisis entre factores, ve a CA")})
})
output$EDAHelp = renderText({"La correlacion entre las variables es:"})
})
observeEvent(input$TotalCorr, {
output$Sumgrafic = renderPlot({
isolate(corrplot(cor(dplyr::select_if(data1, is.numeric)), method = "square",
addCoefasPercent = T, addCoef.col = "black", tl.col = "blue3",
tl.cex = .8,number.cex = .8))
})
output$SumText = renderPrint({
isolate(cor(dplyr::select_if(data1, is.numeric)))
})
})
##### Anim SERVER #####--------------------------------------------------
choices1var_anim = reactive({
switch(class(data1[, input$var1_anim]),
"numeric" = as.list(c("Columns")),
"factor" = as.list(c("NULL"))
)
})
observe({
if(input$var1_anim != "" && !is.null(input$var1) && !input$var2_check_anim){
updateSelectInput(session, "type_graf_anim", choices = choices1var_anim())
}
})
observe({
if(input$var1_anim != "" && !is.null(input$var1_anim) && input$var2_anim != "" && !is.null(input$var2_anim) && input$var2_check_anim){
if(input$type_graf_anim =="Columns" && input$var2_check_anim){
updateSelectInput(session, "group_anim", choices = as.list(input$var1_anim))
}else{
observe({updateSelectInput(session, "group_anim", choices = as.list(names(which(sapply(data1,class)== "factor"))))})
}
}
})
choices2var_anim = reactive({
switch(paste(class(data1[, input$var1_anim]), class(data1[, input$var2_anim])),
"factor numeric" = as.list(c("Columns")),
"factor factor" = as.list(c("NULL")),
"numeric factor" = as.list(c("NULL")),
"numeric numeric" = as.list(c("Scatterplot"))
)
})
observe({
if(input$var1_anim != "" && !is.null(input$var1_anim) && input$var2_anim != "" && !is.null(input$var2_anim) && input$var2_check_anim){
updateSelectInput(session, "type_graf_anim", choices = choices2var_anim())
}
})
observeEvent(input$AnimButton,{
output$Anim_graph <- renderImage({
isolate({
outfile <- tempfile(fileext='.gif')
p = animar(data = data1, varA1 = input$var1_anim, two_var = input$var2_check_anim,
varA2 = input$var2_anim, group = input$group_anim, type_graf = input$type_graf_anim)
anim_save("outfile.gif", animate(p, end_pause = 60))
list(src = "outfile.gif",
contentType = 'image/gif',
width = 600,
height = 600
# alt = "This is alternate text"
)})
}, deleteFile = TRUE)
})
##### PCA SERVER #####--------------------------------------------------
pcadatos = reactiveVal()
observeEvent(input$PCAButton, {
#Para las tablas
pcadatos(PCA(dplyr::select_if(data1, is.numeric), graph = F))
PCAvarTable = t(pcadatos()$eig)
row.names(PCAvarTable) = c("eig-value", "% var", "Cum % var")
output$cumvarPCA = renderDataTable({DT::datatable(PCAvarTable, options = list(scrollX = T))})
output$coefsPCA = renderDataTable({DT::datatable(pcadatos()$var$coord, options = list(scrollX = T))})
tablalimitadaPCA = pcadatos()$ind$coord[1:100, ]
output$scoresPCA = DT::renderDataTable({
DT::datatable(tablalimitadaPCA, options = list(scrollX = T, pageLength = 5))})
output$downloadPCA = downloadHandler(
filename = "PCAdeShiny.csv",
content = function(file){write.csv(pcadatos$ind$coord, file, row.names = F)}
)
#Para los tips
necesarias = paste("Hecho el PCA, recuperas al menos el 80% de varianza si conservas ", which(pcadatos()$eig[,3] > 80)[1], "componentes.")
obtenidas = paste("Con dos dimensiones puedes explicar un ", round(pcadatos()$eig[,3][2], 2), "% de varianza, y con 3 dimensiones puedes explicar un ", round(pcadatos()$eig[,3][3], 2),".")
opinion = switch(as.character(pcadatos()$eig[,3][3]>80),
"TRUE" = "Va a ser sencillo visualizar tus datos con la mayor parte de su varianza.",
"FALSE" = "Puede que tengas problemas para tratar de visualizar tus datos con una buena parte de su varianza")
output$ResumenPCA = renderText({paste(necesarias, obtenidas, opinion, sep = " ")})
dim1o = order(abs(pcadatos()$var$coord[, 1]), decreasing = T)[1:3]
dim2o = order(abs(pcadatos()$var$coord[, 2]), decreasing = T)[1:3]
dim3o = order(abs(pcadatos()$var$coord[, 3]), decreasing = T)[1:3]
dim1 = row.names(pcadatos()$var$coord[dim1o, ])
dim2 = row.names(pcadatos()$var$coord[dim2o, ])
dim3 = row.names(pcadatos()$var$coord[dim3o, ])
por1 = round(pcadatos()$var$coord[dim1o, 1], 3)
por2 = round(pcadatos()$var$coord[dim2o, 2], 3)
por3 = round(pcadatos()$var$coord[dim3o, 3], 3)
res1 = paste("Tu primera componente se explica principalmente por la variable", dim1[1], "con coeficiente", por1[1],
",la variable", dim1[2], "con coeficiente", por1[2], " y", dim1[3], "con coeficiente", por1[3], sep = " ")
res2 = paste("La segunda componente se explica por la variable", dim2[1], "con coeficiente", por2[1],
",la variable", dim2[2], "con coeficiente", por2[2], " y", dim2[3], "con coeficiente", por2[3], sep = " ")
res3 = paste("Finalmente, la tercera se compone principalmente de ", dim3[1], " con coeficiente ", por3[1], ", ",
dim3[2], " con coeficiente ", por3[2], "  y ", dim3[3], " con coeficiente ", por3[3],  sep = "")
output$Resumen2PCA = renderText({paste(res1, res2, res3, "Es tu trabajo interpretar esto.", sep = ". ")})
})
labelsPCAP = reactive({
if(is.null(input$BiplotLabs)){return("none")}
else {return(input$BiplotLabs)}
})
grafiPCA = reactive({switch(input$BiplotGr,
"ind" = fviz_pca_ind(pcadatos(), label = labelsPCAP(),
col.ind = data1[, input$BiplotHab]),
"var" = fviz_pca_var(pcadatos(), label = labelsPCAP() ),
"biplot" = fviz_pca_biplot(pcadatos(), label = labelsPCAP(),
col.ind = data1[, input$BiplotHab])
)  })
observeEvent(input$GrafPCAButton,{
output$screePCA = renderPlot({ isolate(fviz_screeplot(pcadatos(), addlabels = T,
ylab = "% Var")) })
output$PlotPCA = renderPlot({
isolate(grafiPCA())
})
})
##### CA SERVER #####--------------------------------------------------
cadatos = reactiveVal()
observeEvent(input$CAButton, {
#Para las tablas
cadatos(MCA(dplyr::select_if(data1, is.factor), graph = F))
CAvarTable = t(cadatos()$eig)
row.names(CAvarTable) = c("eig-value", "% var", "Cum % var")
output$cumvarCA = renderDataTable({DT::datatable(CAvarTable, options = list(scrollX = T))})
output$coefsCA = renderDataTable({DT::datatable(cadatos()$var$coord, options = list(scrollX = T, pageLength = 5))})
tablalimitadaCA = cadatos()$ind$coord[1:100, ]
output$scoresCA = DT::renderDataTable({
DT::datatable(tablalimitadaCA, options = list(scrollX = T, pageLength = 5))})
output$downloadCA = downloadHandler(
filename = "CAdeShiny.csv",
content = function(file){write.csv(cadatos$ind$coord, file, row.names = F)}
)
#Para los tips
necesarias = paste("Hecho el CA, recuperas al menos el 80% de varianza si conservas ", which(cadatos()$eig[,3] > 80)[1], "componentes.")
obtenidas = paste("Con dos dimensiones puedes explicar un ", round(cadatos()$eig[,3][2], 2), "% de varianza, y con 3 dimensiones puedes explicar un ", round(cadatos()$eig[,3][3], 2),".")
opinion = switch(as.character(cadatos()$eig[,3][3]>80),
"TRUE" = "Va a ser sencillo visualizar tus datos con la mayor parte de su varianza.",
"FALSE" = "Puede que tengas problemas para tratar de visualizar tus datos con una buena parte de su varianza.")
output$ResumenCA = renderText({paste(necesarias, obtenidas, opinion, sep = " ")})
dim1o = order(abs(cadatos()$var$coord[, 1]), decreasing = T)[1:3]
dim2o = order(abs(cadatos()$var$coord[, 2]), decreasing = T)[1:3]
dim3o = order(abs(cadatos()$var$coord[, 3]), decreasing = T)[1:3]
dim1 = row.names(cadatos()$var$coord[dim1o, ])
dim2 = row.names(cadatos()$var$coord[dim2o, ])
dim3 = row.names(cadatos()$var$coord[dim3o, ])
por1 = round(cadatos()$var$coord[dim1o, 1], 3)
por2 = round(cadatos()$var$coord[dim2o, 2], 3)
por3 = round(cadatos()$var$coord[dim3o, 3], 3)
res1 = paste("Tu primera componente se explica principalmente por la variable", dim1[1], "con coeficiente", por1[1],
",la variable", dim1[2], "con coeficiente", por1[2], " y", dim1[3], "con coeficiente", por1[3], sep = " ")
res2 = paste("La segunda componente se explica por la variable", dim2[1], "con coeficiente", por2[1],
",la variable", dim2[2], "con coeficiente", por2[2], " y", dim2[3], "con coeficiente", por2[3], sep = " ")
res3 = paste("Finalmente, la tercera se compone principalmente de ", dim3[1], " con coeficiente ", por3[1], ", ",
dim3[2], " con coeficiente ", por3[2], "  y ", dim3[3], " con coeficiente ", por3[3],  sep = "")
output$Resumen2CA = renderText({paste(res1, res2, res3, "Es tu trabajo interpretar esto.", sep = ". ")})
})
labelsCAP = reactive({
if(is.null(input$BiplotLabs2)){return("none")}
else {return(input$BiplotLabs2)}
})
grafiCA = reactive({switch(input$BiplotGr2,
"var" = fviz_mca_var(cadatos(), label = labelsCAP()),
"ind" = fviz_mca_ind(cadatos(), label = labelsCAP(), col.ind = data1[, input$BiplotHab2]),
"biplot" = fviz_mca_biplot(cadatos(), label = labelsCAP(),
col.ind = data1[, input$BiplotHab2])
)  })
observeEvent(input$GrafCAButton,{
output$screeCA = renderPlot({ isolate(fviz_screeplot(cadatos(), addlabels = T,
ylab = "% Var")) })
output$PlotCA = renderPlot({
isolate(grafiCA())
})
})
##### NN SERVER#####---------------
observeEvent(input$NNButton, {
modelo <- NULL
output$NN_Plot = renderPlot({
isolate({
if (!input$NN_1) {
modelo <<- redes(data = data1, var_est = input$var_est_NN, vPerc = input$vPerc_NN,
unitsE = c(input$unitsE1_NN),
activationE = c(input$activationE1_NN,input$activationE4_NN),
lDrop = NULL, epochsE = input$epochsE_NN, batch_sizeE = input$batch_sizeE_NN,
validation_splitE = input$validation_splitE_NN)
}
if (input$NN_1 & !input$NN_2) {
modelo <<- redes(data = data1, var_est = input$var_est_NN, vPerc = input$vPerc_NN,
unitsE = c(input$unitsE1_NN,input$unitsE2_NN),
activationE = c(input$activationE1_NN,input$activationE2_NN,input$activationE4_NN),
lDrop = c(input$lDrop1_NN, input$lDrop3_NN), epochsE = input$epochsE_NN,
batch_sizeE = input$batch_sizeE_NN,
validation_splitE = input$validation_splitE_NN)
}
if (input$NN_1 & input$NN_2) {
modelo <<- redes(data = data1, var_est = input$var_est_NN, vPerc = input$vPerc_NN,
unitsE = c(input$unitsE1_NN, input$unitsE2_NN, input$unitsE3_NN),
activationE = c(input$activationE1_NN,input$activationE2_NN,input$activationE3_NN,input$activationE4_NN),
lDrop = c(input$lDrop1_NN, input$lDrop2_NN, input$lDrop3_NN),
epochsE = input$epochsE_NN, batch_sizeE = input$batch_sizeE_NN,
validation_splitE = input$validation_splitE_NN)
}
plot(modelo$plt)
})
})
output$NN_Data = renderDataTable ({
isolate(datatable(modelo$data, options = list(scrollX = T, pageLength = 5)))
})
output$NN_Summ <- renderPrint({
isolate({
print(modelo$predT)
print(modelo$ptest)
})
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
